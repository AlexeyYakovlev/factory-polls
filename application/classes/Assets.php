<?php

defined('SYSPATH') or die('No direct script access');

/**
 * Класс для инициализиции каталогов содержащих медиа данные.
 */
class Assets {

    // Массив каталогов для медиа данных
    private static $_assets;

    /**
     * Данный метод инициализирует дерево каталогов
     * @uses Kohana::$config->load
     * @param array $config конфиг
     * @param string $directory текущая позиция в дереве каталогов
     * @param string $level текущая позиция в массиве конфига
     */
    private static function set($config, $directory = '', $level = '') {
        // Проходим в цикле массив из конфига
        foreach ($config as $dir => $val) {
            // Инициализируем ключ во избежании notice
            self::$_assets[$dir] = '';
            // Если значение в конфиге это массив
            if (is_array($val)) {
                // Устанавливаем уровень вложенности в массиве
                $level .= '.' . $dir;
                // Устанавливаем уровень вложенности директории
                $directory .= $dir . DS;
                // Записываем в массив текущую директорию
                self::$_assets[$dir] .= $directory;
                /**
                 * Рекурсивно вызываем метод и передаем уровни вложенности для 
                 * директории и для массива
                 */
                self::set(
                        Kohana::$config->load(
                                'assets' . $level
                        ), $directory, $level
                );
                // Поднимаемся на уровень выше в конфиге
                self::LevelUp($level, '.');
                // ПОднимаемся на уровень выше в директории
                self::LevelUp($directory, DS);
                // в противном случае
            } else {
                // Записываем в массив текущую директорию
                self::$_assets[$dir] = $directory . $val . DS;
            }
        }
    }

    /**
     * Метод позволяет подняться на уровень выше как для уровней массива 
     * конфигурации, так и для уровней вложенности каталогов.
     * @param string $level ссылка на строку с указанием текущего уровня
     * @param string $separator разделитель уровней
     */
    private static function LevelUp(&$level, $separator) {
        // Преобразуем строку во временный массив
        $levelUp = explode($separator, $level);
        // Если разделитель является разделителем директорий
        if ($separator == DS)
        /**
         * Уничтожаем последний элемент массива. Т.к. строка уровней 
         * вложенности каталогов заканчивается "\" или "/" то последний 
         * элемент после разбивки содержит пустое значение. 
         */
            array_pop($levelUp);
        /**
         * Уничтожаем последний элемент в массиве, т.е. текущий уровень 
         * вложенности
         */
        array_pop($levelUp);
        // Собираем строку обратно
        $level = implode($separator, $levelUp);
        // Если разделитель является разделителем директорий
        if ($separator == DS)
        // Добисываем в конец разделитель директорий "\" или "/".
            $level .= DS;
        // Уничтожаем временный массив
        unset($levelUp);
    }

    /**
     * Метод проверяет на существование и возможность чтения сформированный 
     * массив директорий и возвращает его. В случае если директории не 
     * существует, или она недоступна для чтения, то в лог файл будет 
     * сгенерированна соответствующая ошибка.
     * @uses File::CheckDIr() метод проверки директорий
     * @return array массив директорий
     */
    public static function get() {
        // Инициализируем массив директорий
        self::set(Kohana::$config->load('assets'));
        // Перебираем массив директорий
        foreach (self::$_assets as $asset)
        // Проверяем на существование и возможность чтения.
            File::ChekDir($asset, DOCROOT);
        // Возвращаем массив директорий
        return self::$_assets;
    }

}

?>
